# ======================================================================
# CHECK IF THE SCRIPT IS ELEVATED / ELEVATE IF NOT
# ======================================================================
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    $arguments = "& '$($myinvocation.mycommand.definition)'"
    Start-Process powershell -Verb runAs -ArgumentList $arguments
    Exit
}

# ======================================================================
# TURN OFF PROGRESS BAR TO MAKE SCRIPT RUN FASTER
# ======================================================================
$Global:progressPreference = 'silentlyContinue'

# ======================================================================
# BYPASS EXECUTION POLICY TO ALLOW SCRIPT TO RUN
# ======================================================================
Set-ExecutionPolicy Bypass -Scope Process

# ======================================================================
# SUPPRESS SIMPLE ERROR-MESSAGES GENERATED BY SCRIPT TO STAY ALIVE
# ======================================================================
#$ErrorActionPreference = 'SilentlyContinue'

# ======================================================================
# CHECK FOR WINGET UPDATES
# ======================================================================
Write-Host "Checking for WinGet updates..."
$wingetUpdate = winget upgrade --noop
if ($wingetUpdate -ne $null) {
    Write-Host "WinGet updates available, installing..."
    winget upgrade
} else {
    Write-Host "WinGet is up to date"
}
# ======================================================================
# CHECK IF WINGET IS INSTALLED
# ======================================================================
Write-Host "Checking if Winget is Installed..."
if (Get-Command winget -ErrorAction SilentlyContinue) {
    Write-Host "Winget Already Installed"
}
else {
    Write-Host "Winget not found, installing it now."
    
    $ComputerInfo = Get-ComputerInfo
    $OSName = if ($ComputerInfo.OSName) { $ComputerInfo.OSName } else { $ComputerInfo.WindowsProductName }

    if (((($OSName.IndexOf("LTSC")) -ne -1) -or ($OSName.IndexOf("Server") -ne -1)) -and (($ComputerInfo.WindowsVersion) -ge "1809")) {
        Write-Host "Running Alternative Installer for LTSC/Server Editions"
        Start-Process powershell.exe -Verb RunAs -ArgumentList "-command irm https://raw.githubusercontent.com/Chr... | iex | Out-Host" -WindowStyle Normal
    }
    elseif (((Get-ComputerInfo).WindowsVersion) -lt "1809") {
        Write-Host "Winget is not supported on this version of Windows (Pre-1809)"
    }
    else {
        Write-Host "Installing Winget from the Microsoft Store"
        Start-Process "ms-appinstaller:?source=https://aka.ms/getwinget"
        $nid = (Get-Process AppInstaller).Id
        Wait-Process -Id $nid
        Write-Host "Winget Installed"
    }
}

Write-Host "=================================="

# ======================================================================
# DEBLOATING PREINSTALLED TRASH
# ======================================================================
Write-Host "Debloating preinstalled trash..."

$AppsToRemove = @(
    "Microsoft.Xbox.TCUI",
    "*soundrecorder*",
    "*officehub*",
    "*alarms*",
    "*camera*",
    "*communicationsapps*",
    "*zune*",
    "*maps*",
    "*zunevideo*",
    "*solitaire*",
    "*bing*",
    "*bingfinance*",
    "*bingnews*",
    "*bingsports*",
    "*getstarted*",
    "*bingweather*",
    "*skype*",
    "*yourphone*",
    "*whatsapp*",
    "Microsoft.XboxGamingOverlay",
    "Microsoft.XboxIdentityProvider",
    "Microsoft.XboxGameOverlay",
    "Microsoft.XboxSpeechToTextOverlay",
    "Spotify",
    "OneNote",
    "Stickynotes",
    "GetHelp",
    "MixedReality.portal",
    "LinkedIn",
    "*microsoft.getstarted*",
    "Feedback",
    "Clipchamp.Clipchamp"
)

foreach ($AppToRemove in $AppsToRemove) {
    Get-AppxPackage $AppToRemove | Remove-AppxPackage
}

Write-Host "=================================="
Write-host "Garbage cleared, moving on..."
Write-Host "=================================="

# ======================================================================
# INITIATING SELECTED APPLICATIONS INSTALLATION
# ======================================================================
Write-Host "Initiating selected applications installation..."

# List of applications for Winget to install, check your own installed packages managed by winget in PowerShell with the command <WinGet List>
# Mark any listed with <#> to skip that application. 
#!! MAKE SURE NO <,> is present at the end of the last App !!

$AppsToInstall = @(
     "Microsoft.PowerShell" ,
    # "VideoLAN.VLC",
     "Notepad++.Notepad++",
    # "VSCodium.VSCodium",
    # "RevoUninstaller.RevoUninstaller",
    # "TechPowerUp.NVCleanstall",
    # "TheDocumentFoundation.LibreOffice",
    # "PuTTY.PuTTY",
     "AutoHotkey.AutoHotkey" 
    # "REALiX.HWiNFO",
    # "Microsoft.WindowsTerminal",
    # "Giorgiotani.Peazip",
    # "Resplendence.WhoCrashed",
    # "Microsoft.Sysinternals.TCPView",
    # "Sandboxie.Plus",
	# "Microsoft.DotNet.SDK.6",
    # "Microsoft.DotNet.DesktopRuntime.6",
    # "Microsoft.DotNet.AspNetCore.6",
    # "Microsoft.DotNet.Runtime.6"
    # "Microsoft.DotNet.SDK.7",
    # "Microsoft.DotNet.DesktopRuntime.7",
    # "Microsoft.DotNet.AspNetCore.7",
    # "Microsoft.DotNet.Runtime.7",
    # "Microsoft.DotNet.SDK.8",
    # "Microsoft.DotNet.DesktopRuntime.8",
    # "Microsoft.DotNet.AspNetCore.8",
    # "Microsoft.DotNet.Runtime.8",	
    # "Neovim.Neovim",
    # "Git.Git",
    # "Discord.Discord",
    # "Wagnardsoft.DisplayDriverUninstaller",
    # "GitHub.GitHubDesktop",
    # "Oracle.VirtualBox",
    # "Wagnardsoft.DisplayDriverUninstaller",
    # "Wagnardsoft.DisplayDriverUninstaller",
    # "Wagnardsoft.DisplayDriverUninstaller",
)

foreach ($AppToInstall in $AppsToInstall) {
    winget install --id=$AppToInstall -e -h --accept-package-agreements --accept-source-agreements
}
# Downloading Brave browser
#(New-Object System.Net.WebClient).DownloadFile('https://laptop-updates.brave.com/latest/winx64', 'C:\BraveSetup.exe')

# Installing Brave browser
#Start-Process -FilePath 'C:\BraveSetup.exe' -ArgumentList '/silent' -Wait

# Downloading G-helper, light-running ASUS mobos drivers substitute. 
#(New-Object System.Net.WebClient).DownloadFile('https://github.com/seerge/g-helper/releases/latest/download/GHelper.zip', 'C:\GHelper.zip')

Write-Host "==============================================================" 
Write-Host "Applications done, getting drivers...
Write-Host "=============================================================="
#Download drivers, uncomment the method preferred.

# Download auto installation

# Download driver
#$driverUrl = "https://example.com/driver.exe"
#$driverPath = "C:\Downloads\driver.exe"
#Invoke-WebRequest -Uri $driverUrl -OutFile $driverPath

# Install driver
#Start-Process -FilePath $driverPath -ArgumentList "/silent" -Wait

#===================================

# Only downloading, manual installation

# Download drivers to a specified location
#$driverUrls = @{
#    "Graphics" = "https://example.com/graphics_driver.exe"
#    "Network" = "https://example.com/network_driver.exe"
#    # Add more driver URLs as needed
#}

#$downloadDirectory = "C:\Downloads\Drivers"
#if (-not (Test-Path -Path $downloadDirectory)) {
#    New-Item -Path $downloadDirectory -ItemType Directory
#}

#foreach ($driverType in $driverUrls.Keys) {
#    $driverUrl = $driverUrls[$driverType]
#    $driverFileName = Split-Path $driverUrl -Leaf
#    $driverFilePath = Join-Path -Path $downloadDirectory -ChildPath $driverFileName
#
#    Write-Host "Downloading $driverType driver..."
#    Invoke-WebRequest -Uri $driverUrl -OutFile $driverFilePath
#}

#Write-Host "Driver download completed."

Write-Host "=============================================================="
Write-Host "Installations done and trash gone, switching over to Pwsh..."
Write-Host "=============================================================="

# Next command will start another script to customize the environment in PowerShell 7
# by installing Oh-My-Posh, PSWindowsUpdate module, along with some couple others needed 
# for proper execution.          
#  Chris Titus Tech's Windows Utility application to further debloat and tweaking Windows.
# If not needed, mark the command with a <#>, save any changes done to the script and press
# 'run in PowerShell' by right-clicking install.ps1
Start-Process pwsh.exe -Verb RunAs -Windowstyle Normal "-file c:\fresh\pwsh.ps1"

##THE END#
##########

