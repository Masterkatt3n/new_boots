# Check if the script is elevated / elevate if not
if (-not ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
    $arguments = "& '$($myinvocation.mycommand.definition)'"
    Start-Process powershell -Verb runAs -ArgumentList $arguments
    Exit
}

# Turn off progress bar to make script run faster
$Global:progressPreference = 'silentlyContinue'

# Bypass execution policy to allow script to run
Set-ExecutionPolicy Bypass -Scope Process -Force

# Suppress simple error messages generated by script to stay alive
$ErrorActionPreference = 'SilentlyContinue'

# Check for WinGet updates
Write-Host "Checking for WinGet updates..."
$wingetUpdate = winget upgrade --noop
if ($wingetUpdate -ne $null) {
    Write-Host "WinGet updates available, installing..."
    winget upgrade
} else {
    Write-Host "WinGet is up to date"
}

# Check if Winget is installed
Write-Host "Checking if Winget is installed..."
if (Get-Command winget -ErrorAction SilentlyContinue) {
    Write-Host "Winget Already Installed"
}
else {
    Write-Host "Winget not found, installing it now."
    
    # Installation logic based on OS version
    Write-Host "Winget not found, installing it now."
    
    $ComputerInfo = Get-ComputerInfo
    $OSName = if ($ComputerInfo.OSName) { $ComputerInfo.OSName } else { $ComputerInfo.WindowsProductName }

    if (((($OSName.IndexOf("LTSC")) -ne -1) -or ($OSName.IndexOf("Server") -ne -1)) -and (($ComputerInfo.WindowsVersion) -ge "1809")) {
        Write-Host "Running Alternative Installer for LTSC/Server Editions"
        Start-Process powershell.exe -Verb RunAs -ArgumentList "-command irm https://raw.githubusercontent.com/Chr... | iex | Out-Host" -WindowStyle Normal
    }
    elseif (((Get-ComputerInfo).WindowsVersion) -lt "1809") {
        Write-Host "Winget is not supported on this version of Windows (Pre-1809)"
    }
    else {
        Write-Host "Installing Winget from the Microsoft Store"
        Start-Process "ms-appinstaller:?source=https://aka.ms/getwinget"
        $nid = (Get-Process AppInstaller).Id
        Wait-Process -Id $nid
        Write-Host "Winget Installed"
    }
}

Write-Host "=================================="
# Installing Chocolatey, Oh My Posh module, and additional tools
Write-Host "Installing Oh My Posh!..."
$AppsToInstall = @(
    "JanDeDobbeleer.OhMyPosh",
    "Chocolatey.Chocolatey",
    "ajeetdsouza.zoxide"
)

foreach ($AppToInstall in $AppsToInstall) {
    WinGet Install --id=$AppToInstall -e -h --accept-package-agreements --accept-source-agreements
}

Write-Host "O-M-P and Chocolatey installed..."
Write-Host "=================================="

Write-Host "Pulling personal PS-Profile and fonts..."
# Function to unzip files
function unzip {
    param (
        [string]$source,
        [string]$destination = $PWD
    )

    Write-Output "Extracting $source to $destination"

    # Check if the source file exists
    $fullPath = Join-Path $PWD $source
    if (-not (Test-Path $fullPath -PathType Leaf)) {
        Write-Host "Source file not found: $fullPath" -ForegroundColor Red
        return
    }

    # Check if the destination folder exists, create it if not
    if (-not (Test-Path $destination -PathType Container)) {
        New-Item -ItemType Directory -Force -Path $destination | Out-Null
    }

    # Unzip the contents
    try {
        Compress-Archive -Path $fullPath -DestinationPath $destination -Force -ErrorAction Stop
        Write-Output "Extraction successful"
    }
    catch {
        Write-Host "Extraction failed: $_" -ForegroundColor Red
    }
}

# Pulling personal PS-Profile and fonts
Write-Host "Pulling personal PS-Profile and fonts..."
$profileUrl = "https://raw.githubusercontent.com/Masterkatt3n/new_boots/main/PowerShell-profile.ps1"
$fontsUrl = "https://github.com/Masterkatt3n/new_boots/blob/main/CascadiaCode.zip"

# Define the destination folder for fonts
$fontsDestination = "$env:USERPROFILE\Fonts"

# Download the profile and fonts
Invoke-RestMethod -Uri $profileUrl -OutFile $PROFILE
Invoke-RestMethod -Uri $fontsUrl -OutFile "$env:TEMP\CascadiaCode.zip"

# Unzip the fonts using the unzip function from the profile
unzip -source "$env:TEMP\CascadiaCode.zip" -destination $fontsDestination

# Install fonts
$shell = New-Object -ComObject Shell.Application
$fontFolder = $shell.Namespace($fontsDestination)
$zipFolder = $shell.Namespace("$env:TEMP")
$fonts = $zipFolder.Items() | Where-Object { $_.Type -eq 'CompressedFolder' -and $_.Name -eq 'CascadiaCode' }

if ($fonts -ne $null) {
    $fontFolder.CopyHere($fonts.Items(), 16)
    Write-Host "Fonts installed successfully."
} else {
    Write-Host "Failed to find extracted fonts."
}

Write-Host "Fonts downloaded and PS-Profile installed in Pwsh..."
Write-Host "=================================="

# Install the PSWindowsupdate module to manage updates through PowerShell.
# Mark <#> to skip.
Write-Host "Installing PSWindowsUpdate Module..."
Install-Module PSWindowsUpdate -Force
Add-WUServiceManager -MicrosoftUpdate -Confirm:$false
Write-Host "PSWindowsUpdate installed..."
Write-Host "=================================="

# Finishing up by starting the WinUtil application for further installation/modifications.
Write-Host "WinUtil powering up..."
iwr -useb https://christitus.com/win | iex

# Clean up - Delete downloaded zip file and fonts folder
Remove-Item "$env:TEMP\CascadiaCode.zip" -Force
Remove-Item "$fontsDestination" -Recurse -Force

#The End 